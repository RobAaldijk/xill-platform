/**
 * Copyright (C) 2014 Xillio (support@xillio.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
* Specification:
*   When multiple errors occur on one line in a do block, the error message in the fail block MUST be the first
*   error's message
* Input: An error message
* Expected: The error message in the fail block should be the same as the provided one
 */

use Assert, File, Mongo;

Mongo.connect("udm_default");

var message = "Nested error";

// Test do when two errors are thrown on one line
do {
    // File.exists throws an error when its argument is null
    File.exists(Assert.error(message));
} fail (error) {
    Assert.equal(error.message, message,
        "The error message does not match the expected message");
}

// Test do when two errors are thrown and the first one is nested in an OBJECT
do {
    // File.exists throws an error when its argument is an OBJECT
    File.exists({"test": Assert.error(message)});
} fail (error) {
    Assert.equal(error.message, message,
        "The error message does not match the expected message");
}

// Test 1: Invalid value
do {
    var doc = Mongo.objectId("a.b.c");
} fail(error) {
    // System.print(System.toJSON(error, true));
    Assert.equal(error.message, "invalid hexadecimal representation of an ObjectId: [a.b.c]");
}

// Test 2: Invalid parameter type
do {
    var doc = Mongo.objectId({});
} fail(error) {
    Assert.equal(error.message, "Wrong type for argument `string` in objectId(<ATOMIC> string); expected [ATOMIC] but received [OBJECT]");
}

// Test 3a: Error nested as incorrect function parameter: Using invalid string
do {
    var doc = Mongo.findOne("documents", Mongo.objectId("a.b.c"));
} fail(error) {
    Assert.equal(error.message, "invalid hexadecimal representation of an ObjectId: [a.b.c]");
}

// Test 3b: Error nested as correct function parameter: Using invalid string
do {
    var doc = Mongo.findOne("documents", {"_id" : Mongo.objectId("a.b.c")});
} fail(error) {
    Assert.equal(error.message, "invalid hexadecimal representation of an ObjectId: [a.b.c]");
}

// Test 4a: Error nested as incorrect function parameter: Using invalid object type
do {
    var id1 = Mongo.findOne("documents", Mongo.objectId({}));
} fail(error) {
    Assert.equal(error.message, "Wrong type for argument `string` in objectId(<ATOMIC> string); expected [ATOMIC] but received [OBJECT]");
}

// Test 4b: Error nested as correct function parameter: Using invalid object type
do {
    var id1 = Mongo.findOne("documents", {"_id" : Mongo.objectId({})});
} fail(error) {
    Assert.equal(error.message, "Wrong type for argument `string` in objectId(<ATOMIC> string); expected [ATOMIC] but received [OBJECT]");
}
