/**
 * Copyright (C) 2014 Xillio (support@xillio.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
* Specification: number % number MUST return modulo(number, number) in both ways
* Expected: See dataset
* Input: See dataset
*/

use Assert;

foreach(data in getDatasetAB()){
    Execute(data[0],data[1],data[2]);
}

foreach(data in getDatasetBA()){
    Execute(data[1],data[0],data[2]);
}

function Execute(input1, input2, expected){
    var result = input1 % input2;
    Assert.equal(result, expected);
}

// Returns a list of operands and expected results in the format (operand 1, operand 2, expected result)
function getDatasetAB(){
    return [
        [5832,758934,5832],                             // Random numbers
        [-102, -50, -2],                                // Negative values
        [-1354, 12349,-1354],                           // Negative and postive number
        [2147483697,10,7],                              // MAX_INT
        [-214748364700, -214748364799, -214748364700],  // MIN_INT
        ["0.5", "2.9", 0.5],                            // String-float numbers
        ["25", 0.5, 0.0],                               // String-number and number
        [1/0, 1, NaN],                                 // INFINITY
        [-1/-0, -1, NaN],                              // Negative INFINITY
        [0, 0.0, NaN],                                  // Zero-values (0/0)
        [0, 1, 0],                                      // Try to create Inifinty (should not)
        [true, true, 0],                                // True values
        [false, 1, 0]                                    // False value 
    ];
}

// Returns a list of operands and expected results in the format (operand 2, operand 1, expected result)
function getDatasetBA(){
    return [
        [5832,758934,774],                      // Random numbers
        [-102, -50, -50],                       // Negative values
        [-1354, 12349,163],                     // Negative and postive number
        [214748364700,10,10],                   // MAX_INT + 10
        [-2147483647, -1, -1],                  // MIN_INT - 1
        ["0.5", "2.9", 0.3999999999999999],     // String-float numbers (known bug, Java issue)
        ["25", 0.5, 0.5],                       // String-number and number
        [1/0, 1, 1],                            // INFINITY
        [-1/-0, -1, -1],                        // Negative INFINITY
        [0, 0.0, NaN],                          // Zero-values
        [true, true, 0],                        // True value -1
        [1, false, 0]                           // False value 0
    ];
}