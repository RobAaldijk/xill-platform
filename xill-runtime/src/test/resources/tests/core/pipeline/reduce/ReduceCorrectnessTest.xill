/**
 * Copyright (C) 2014 Xillio (support@xillio.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* 
* Specification: Reduce calls a function for the each accumulated element and the next item, and returns the final accumulator.
* Input: All types of variables, containing numbers.
* Expected: The sum of the numbers in the variable plus the initial accumulator given to reduce. When called on null, the function is not invoked.
*/

use Assert;

var nullVar;
var atomic = 1;
var list = [ 1, 2, 4 ];
var object = { "a": 1, "b": 2, "c": 4 };

reduce<shouldBeEmpty>(0, nullVar);
Assert.equal(reduce<add>(1, atomic), 2);
Assert.equal(reduce<add>(0, list), 7);
Assert.equal(reduce<addObject>(-5, object), 2);

function add(i1, i2) {
    return i1 + i2;
}

function addObject(acc, obj) {
    foreach (k, v in obj) {
        return acc + v;
    }
}

function shouldBeEmpty(i1, i2) {
    Assert.error("Iterator should be empty.");
}