/**
 * Copyright (C) 2014 Xillio (support@xillio.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* 
* Specification: Filter filters out all variables for which the function returns false.
* Input: All types of variables, containing positive and negative numbers, and a function that returns true if its argument is >= 0.
* Expected: A list containing only positive entries in the correct order. When called on null, the function is not invoked.
*/

use Assert;

// All types of variables.
var nullVar;
var posAtomic = 2;
var negAtomic = -2;
var list = [ 2, -219348, 3.14, -1, 28 ];
var object = { "a": -17, "b": 1234, "c": 5 };

filter<shouldBeEmpty>(nullVar);
Assert.equal(collect(filter<isPositive>(posAtomic)), [ 2 ]);
Assert.equal(collect(filter<isPositive>(negAtomic)), []);
Assert.equal(collect(filter<isPositive>(list)), [ 2, 3.14, 28 ]);
Assert.equal(collect(filter<isPositiveObject>(object)), [{ "b": 1234 }, { "c": 5 }]);

function isPositive(num) {
    return num >= 0;
}

function isPositiveObject(obj) {
    foreach (k, v in obj) {
        return isPositive(v);
    }
}

function shouldBeEmpty(item) {
    Assert.error("Iterator should be empty.");
}