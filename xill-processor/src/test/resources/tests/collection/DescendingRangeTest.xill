/**
 * Copyright (C) 2014 Xillio (support@xillio.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Specification: When start is greater than end, the range MUST be descending
 * Input: See input variable
 * Expected: See output variable
 */
 use Assert, Collection, Math;
 
 var input = [
     [10, 0, -1],
     [20, 10, -2],
     [-5, -10, -1.5],
     [0.0, -0.08, -0.01], 
     [10, 0, -100],
     [20, 10, -10]
 ];
 
 var output = [
    [10,9,8,7,6,5,4,3,2,1],
    [20,18,16,14,12],
    [-5, -6.5, -8, -9.5],
    [0.0, -0.01, -0.02, -0.03, -0.04, -0.05, -0.06, -0.07],
    [10], 
    [20]
 ];
 var allowedDiff = 0.000000000000001; // Abitrary small number to allow offset in double inconsistincies
 
 var count = Collection.length(output) - 1;
 
 while(count > 0) {
    var currentInput = input[count];
    var currentOutput = output[count];
    testInput(currentInput[0], currentInput[1], currentInput[2], currentOutput);
    count--;
 }
 
 function testInput(start, end, step, output) {
    var iterator = Collection.range(start, end, step);    
    var result = collect(iterator);
    var count = 0;
    
    while(count < Collection.length(result)) {
        // Logic to check whether double values do not have a too high of an offset.
        var absDiff = Math.abs(result[count] - output[count]);
        Assert.isTrue(absDiff < allowedDiff);
        count++;
    }
    Assert.equal(Collection.length(output), Collection.length(result));
 }