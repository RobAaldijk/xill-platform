/**
 * Copyright (C) 2014 Xillio (support@xillio.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
* Specification:
*   When multiple errors occur on one line in a do block, the error message in the fail block MUST be the first
*   error's message
* Input: An error message
* Expected: The error message in the fail block should be the same as the provided one
 */

use Assert, File;

var message = "Nested error";
var wrongArgumentMessage = "Wrong type for argument `path` in exists(<ATOMIC> path); expected [ATOMIC] but received [OBJECT]";

// Test do when two errors are thrown on one line
do {
    // File.exists throws an error when its argument is null
    File.exists(Assert.error(message));
} fail (error) {
    Assert.equal(error.message, message,
        "The error message does not match the expected message");
}

// Test do when two errors are thrown and the first one is nested in an OBJECT
do {
    // File.exists throws an error when its argument is an OBJECT
    File.exists({"test": Assert.error(message)});
} fail (error) {
    Assert.equal(error.message, message,
        "The error message does not match the expected message");
}

// Test do when two errors are thrown on one line and the first one is due to a wrong argument
do {
    // File.exists throws an error when its argument is null
    // The nested File.exists throws an error because of the wrong argument type
    File.exists(File.exists({}));
} fail (error) {
    Assert.equal(error.message, wrongArgumentMessage,
        "The error message does not match the expected message");
}

// Test do when two errors are thrown and the first one is nested in an OBJECT and caused by a wrong argument
do {
    // File.exists throws an error when its argument is an OBJECT
    // The nested File.exists throws an error because of the wrong argument type
    File.exists({"test": File.exists({})});
} fail (error) {
    Assert.equal(error.message, wrongArgumentMessage,
        "The error message does not match the expected message");
}
