<?xml version="1.0" encoding="utf-8"?>
<!--

    Copyright (C) 2014 Xillio (support@xillio.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<function>
    <description>
Takes one or more `JSON` strings and converts it to one or more `ATOMIC`, `LIST` or `OBJECT` variables.
    </description>
	<parameterDescriptions>
		<parameterDescription parameterName="json">
The json string that will be converted.
        </parameterDescription>
	</parameterDescriptions>
	<longDescription>
When provided an `ATOMIC`, this construct will parse that single `JSON` string to a variable. When provided a `LIST`, all the top-level elements of that list will be parsed as single `JSON` strings to a variable.
These variables will then be combined in a `LIST`.

The given `ATOMIC` or `LIST`, and the elements of that `LIST`, may not be `null` or empty.

For more information about and syntax of `JSON`, see [http://www.json.org/](http://www.json.org/).
	</longDescription>
    <examples>
        <example title="Default usage">
            <header>
                This robot parses the given string to JSON resulting in an OBJECT.
                This OBJECT contains a LIST of employees named John Doe, Anna Jane Smith and Peter Jones.
            </header>
            <code>
                use System;

                var json = '{ "employees" : [' ::
                    '{ "firstName":"John" , "lastName":"Doe" },' ::
                    '{ "firstName":"Anna" , "middleName":"Jane", "lastName":"Smith" },' ::
                    '{ "firstName":"Peter" , "lastName":"Jones" } ]}';

                var parsedObject = System.parseJSON(json);

                System.print(parsedObject.employees);
            </code>
        </example>
        <example title="Multiple JSON strings">
            <header>
                When having a LIST of JSON strings, it is also possible to parse the whole LIST at once.
                In this case, three different JSON strings representing three different extractions will be parsed at once.
                This creates three OBJECTS in the resulting LIST.
            </header>
            <code>
                use System;

                var jsonList = [
                '{"Extraction1" : {"Status" : "OK", "Code" : 200}}',
                '{"Extraction2" : {"Status" : "FAILED", "Code": 404}}',
                '{"Extraction3" : {"Status" : "IN PROGRESS"}}'];

                var parsedList = System.parseJSON(jsonList);

                System.print(parsedList[0]);
                System.print(parsedList[1]);
                System.print(parsedList[2]);
            </code>
        </example>
    </examples>
    <references>
        <reference>toJSON</reference>
    </references>
    <searchTags>
        json, parse, convert, read, api, rest
    </searchTags>
</function>