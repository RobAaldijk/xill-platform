<?xml version="1.0" encoding="utf-8"?>
<!--

    Copyright (C) 2014 Xillio (support@xillio.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<function>
    <description>
Solves the optimal assignment problem using the Hungarian Algorithm on matrix, which is a two-dimensional list containing numbers.  

Returns the optimal combination of rows / columns and the optimal sum as an object.  
The optional argument max (defaults to true) defines whether maximum sum or minimum sum should be returned.  
Useful for calculating optimal costs or income based on a matrix.

The algorithm treats the list as a matrix checks each column and calculates in which row the maximum value is found.
Then it marks this row down and adds that number to the sum.
However, each row and each column may only be used once so it will try all interesting combinations and return only the optimum.
    </description>
    <examples>
        <example title="Usage">
            <code>
                use Math, System;

                var matrix = [[0,1,3], [2,2,3], [5,4,1]];
                System.print(Math.hungarianAlgorithm(matrix, true));
                
                // Result: 
                // {
                //     "sum" : 10.0,
                //     "cells" : [
                //         {"row":0, "col":2},
                //         {"row":1, "col":1},
                //         {"row":2, "col":0}
                //     ]
                // }
            </code>
        </example>
    </examples>
</function>