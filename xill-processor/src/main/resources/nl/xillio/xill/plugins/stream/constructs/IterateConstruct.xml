<?xml version="1.0" encoding="utf-8"?>
<!--

    Copyright (C) 2014 Xillio (support@xillio.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<function>
    <description>
Wraps an iterator around a `stream` and returns this.
    </description>
	<parameterDescriptions>
		<parameterDescription parameterName="stream">
The stream that will be wrapped around.
        </parameterDescription>
		<parameterDescription parameterName="delimiter">
The regex pattern that will split the input `stream` in parts. If none is provided the stream will be split on new lines.
        </parameterDescription>
	</parameterDescriptions>
    <examples>
        <example title="Usage">
            <header>Read a file line by line</header>
            <code>
                use File;
                use Stream;
                use System;

                var file = File.openRead("path/to/file.txt");

                foreach(line in Stream.iterate(file)) {
                    System.print(line);
                }
            </code>
            <header>Read all words from a file</header>
            <code>
                use File;
                use Stream;
                use System;

                var file = File.openRead("path/to/file.txt");
                var splitPattern = "[^\\w]+";

                foreach(word in Stream.iterate(file, splitPattern)) {
                    System.print(word);
                }
            </code>
        </example>
    </examples>
    <references>
        <reference>File.openRead</reference>
        <reference>File.openAppend</reference>
        <reference>File.openWrite</reference>
        <reference>Stream.write</reference>
    </references>
    <tags>
        read, write, append, text, content, create
    </tags>
</function>