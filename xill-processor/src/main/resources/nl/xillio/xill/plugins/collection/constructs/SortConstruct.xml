<?xml version="1.0" encoding="utf-8"?>
<!--

    Copyright (C) 2014 Xillio (support@xillio.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<function>
    <description>
Returns the sorted list or object by lowest first.
    </description>
	<parameterDescriptions>
		<parameterDescription parameterName="collection">
The list or object that will be sorted.
        </parameterDescription>
		<parameterDescription parameterName="recursive">
If set to true the lists and object inside the given list or object will also be sorted.
        </parameterDescription>
		<parameterDescription parameterName="onKeys">
If set to true the object will be sorted by key instead of by value.
        </parameterDescription>
		<parameterDescription parameterName="reverse">
If set to true the list or object will sort highest first.
        </parameterDescription>
	</parameterDescriptions>
	<longDescription>
Input will be sorted in order of: Lists -> Objects -> Numbers -> Strings
The given parameters will sort each of those segments.
	</longDescription>
    <examples>
        <example title="Sorting Lists">
            <header>
                Examples on how to use sorting for lists

                (Note: onKey option has no effect for lists)
            </header>
            <code>
                use System;
                use Collection;

                var list = [2,1,"c","a",[1,2],[4,3],{"a":2,"b":1},{"1":"a","2":"z"}];

                // Sort normal:
                System.print(Collection.sort(list));
                // Result: [[1,2],[4,3],{"a":2,"b":1},{"1":"a","2":"z"},1,2,"a","c"]

                // Sort recursive:
                System.print(Collection.sort(list,true,false,false));
                // Result: [[1,2],[3,4],{"b":1,"a":2},{"1":"a","2":"z"},1,2,"a","c"]

                // Sort reverse:
                System.print(Collection.sort(list,false,false,true));
                // Result: [[1,2],[4,3],{"a":2,"b":1},{"1":"a","2":"z"},2,1,"c","a"]

            </code>
        </example>
        <example title="Sorting Objects">
            <header>
                Examples on how to use sorting for objects
            </header>
            <code>
                use System;
                use Collection;

                var obj = {
                    "0": 50,
                    "1": 0,
                    "list": [1,3,2],
                    "obj": {"a":50,"b":10},
                };

                // Sort normal:
                System.print(Collection.sort(obj));
                // Result: {"list":[1,3,2],"obj":{"a":50,"b":10},"1":0,"0":50}

                // Sort recursive:
                System.print(Collection.sort(obj,true));
                // Result: {"list":[1,2,3],"obj":{"b":10,"a":50},"1":0,"0":50}

                // Sort onKey:
                System.print(Collection.sort(obj,false,true));
                // Result: {"0":50,"1":0,"list":[1,3,2],"obj":{"a":50,"b":10}}

                // Sort reverse:
                System.print(Collection.sort(obj,false,false,true));
                // Result: {"list":[1,3,2],"obj":{"a":50,"b":10},"0":50,"1":0}
            </code>
        </example>
    </examples>
</function>