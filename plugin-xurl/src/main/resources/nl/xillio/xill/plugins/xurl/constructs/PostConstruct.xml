<?xml version="1.0" encoding="utf-8"?>
<!--

    Copyright (C) 2014 Xillio (support@xillio.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<function>
    <description>
Perform a post request and return the response from the server.

## Request
### Body
The body parameter can contain the following types:

| Input                            | Default Content-Type     |
| -------------------------------- | ------------------------ |
| Stream                           | application/octet-stream |
| LIST                             | application/json         |
| OBJECT                           | application/json         |
| Result from XML plugin           | application/xml          |
| OBJECT with the multipart option | multipart/form-data      |
| ATOMIC                           | text/plain               |

However, you can influence the content type by manually setting the Content-Type header.

### Options
To set various options for the request you can use the options parameter. The passed value should be an object containing
option names as keys and their respective values as values.
Check out the code examples for more information about the options.

| Option Name         | Value                                                                             | Description                                                                       |
| ------------------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- |
| basicAuth           | An object containing a username and a password                                    | Set these credentials to perform basic authentication                             |
| proxy               | An object contains at least a host but optionally a port or username and password | Set these options to connect through a proxy                                      |
| timeout             | An integer that represents the timeout in milliseconds                            | Set this option to limit the time a request can take                              |
| headers             | An object containing the headers                                                  | Set this option to add custom headers to your request                             |
| insecure            | A boolean *default: false*                                                        | Set this option to true if you want to skip hostname validation                   |
| enableRedirect      | A boolean *default: true*                                                         | Set this option to false if you do not want to automatically follow redirects      |
| multipart           | A boolean *default: false*                                                        | Set this option to true if you want to build a multipart/form-data request        |
| responseContentType | A String describing a content type                                                | Set this option to override the the response type auto detector                   |
| logging             | A String (debug, info, warn or error) *default: none*                             | Set this option to enable logging of requests and responses                       |

### Multipart
When the request needs to have a multipart body, the multipart option needs to be set. The body of such a request has
to be an OBJECT in the following format:

    {
        "part1": {
            "content":"The content",
            "type":"text",
            "contentType":"text/plain; charset=UTF-8"
        }
    }

or a LIST in the following format:

    [
        {
            "name":"part1",
            "content":"The content",
            "type":"text",
            "contentType":"text/plain; charset=UTF-8"
        }
    ]

The two bodies above are equivalent. Passing the body as a LIST allows for multiple parts with the same name.

The body can arbitrarily many parts containing at least the content and type options. The contentType option is optional.
See the table below for an explanation of the options a body part should consist of.

| Option Name            | Value                                                                                                            | Description                                                                    |
| ---------------------- | ---------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------ |
| name                   | A string containing the part name                                                                                | The part name, should only be present when the body is a LIST                  |
| content                | A string containing a filename or a stream, depending on the type option                                         | The content of the body part                                                   |
| type                   | Can be "text", "file" or "stream"                                                                                | Determines the type of the content option                                      |
| contentType (optional) | A string containing an HTTP content type, or a default depending on the content option's type if not specified   | The content type of the body part's content, this option will not be validated |

## Response
If the request is performed without errors the return value will be an object that describes the response.

### Status
The *status* field contains an object that has a *code* field that contains the HTTP Status Code 
and a *phrase* field that contains the description.

    {
        "status": {
            "code": 200,
            "phrase": "OK"
        },
        ...
    }
    
### Headers
The *headers* field contains an object that has the header names as keys and header values as values.

    {
        "headers" : {
            "Content-Type" : "application/json; charset=UTF-8",
            "access-control-allow-origin" : "*",
            "Vary" : "Accept-Encoding",
            "Date" : "Thu, 18 Feb 2016 09:10:46 GMT",
            "Server" : "Google Frontend",
            "Cache-Control" : "private",
            "Alt-Svc" : "quic=\":443\"; ma=2592000; v=\"30,29,28,27,26,25\"",
            "Transfer-Encoding" : "chunked"
        },
        ...
    }

### Version
The *version* field contains a string describing the current HTTP protocol version.

    {
        "version": "HTTP/1.1",
        ...
    }

### Body
The *body* field contains the response body. The type of content in here is auto detected form the Content-Type 
header which can be overridden using the *responseContentType* option.

| Content-Type    | Result                                         |
| --------------- | ---------------------------------------------- |
| Contains "json" | The json parsed to an expression               |
| Contains "xml"  | An XML node that can be used by the XML plugin |
| Contains "text" | A plain text string                            |
| Otherwise       | A stream containing the data                   |

    // JSON
    {
        "body": {
            "data": ["It's, "a", "good", "day"]
        },
        ...
    }
    // XML
    {
        "body": "XML Document[first node = Data]",
        ...
    }
    // TEXT
    {
        "body": "Hello World",
        ...
    )
    // STREAM
    {
        "body": "[Stream application/octet-stream]",
        ...
    }
    </description>
    <examples>
        <example title="Usage">
            <header>Make a minimal post request</header>
            <code>
                use XURL, System;

                var response = XURL.post(
                    "https://httpbin.org/post",
                    "This is my plain text data"
                );

                var prettyJson = System.toJSON(response, true);
                System.print(prettyJson);
            </code>
            <header>Send a multipart request</header>
            <code>
                use XURL, System, File;

                var filePath = "C:\\tmp\\note.txt";

                var response = XURL.post(
                    "https://httpbin.org/post",
                    {
                        "file": {
                            "content": filePath,
                            "type": "file",
                            "contentType": "text/plain"
                        },
                        "description": {
                            "content": "This is an example of a multipart request",
                            "type": "text"
                        }
                    },
                    {
                        // Make this request a multipart request
                        "multipart": true
                    }
                );

                var prettyJson = System.toJSON(response, true);
                System.print(prettyJson);
            </code>
            <header>Send a request under basic authentication</header>
            <code>
                use XURL, System;

                var response = XURL.post(
                    "http://example.com/login",
                    "This is an example of an authenticated request",
                    {
                        // Set the basicAuth option
                        "basicAuth": {
                            "username": "user",
                            "password": "passwd"
                        }
                    }
                );

                var prettyJson = System.toJSON(response, true);
                System.print(prettyJson);
            </code>
            <header>Send a request with a custom content type</header>
            <code>
                use XURL, System;

                var response = XURL.post(
                    "http://myserver.com/documentum",
                    '{ "data": "My Document" }',
                    {
                        "headers": {
                            "Content-Type": "application/vnd.emc.documentum+json"
                        }
                    }
                );

                var prettyJson = System.toJSON(response, true);
                System.print(prettyJson);
            </code>
            <header>Enable debug logging for requests</header>
            <code>
                use XURL, System;

                var response = XURL.post(
                    "https://httpbin.org/post",
                    "This is my plain text data",
                    {
                        "logging": "debug"
                    }
                );

                var prettyJson = System.toJSON(response, true);
                System.print(prettyJson);
            </code>
        </example>
    </examples>
    <references>
        <reference>delete</reference>
        <reference>get</reference>
        <reference>head</reference>
        <reference>put</reference>
        <reference>options</reference>
        <reference>patch</reference>
    </references>
    <tags>
        REST, post, request, response, JSON
    </tags>
</function>
