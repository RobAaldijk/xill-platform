<?xml version="1.0" encoding="utf-8"?>
<!--

    Copyright (C) 2014 Xillio (support@xillio.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<function>
    <description>
Performs a post request to `url` with the given `body` and `options` and returns the response from the server.
    </description>
	<parameterDescriptions>
		<parameterDescription parameterName="url">
The URL that the request will be sent to.
        </parameterDescription>
		<parameterDescription parameterName="body">
The body parameter can contain the following types:

| Input                            | Default Content-Type     |
| -------------------------------- | ------------------------ |
| Stream                           | application/octet-stream |
| LIST                             | application/json         |
| OBJECT                           | application/json         |
| Result from XML plugin           | application/xml          |
| OBJECT with the multipart option | multipart/form-data      |
| ATOMIC                           | text/plain               |

However, you can influence the content type by manually setting the Content-Type header.
        </parameterDescription>
		<parameterDescription parameterName="options">
To set various options for the request you can use the options parameter. The passed value should be an object containing option names as keys and their respective values as values.
Check out the code examples for more information about the options.

| Option Name         | Value                                                                                                   | Description                                                                       |
| ------------------- | ------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- |
| basicAuth           | An OBJECT containing `username` and `password` fields                                                   | Set these credentials to perform basic authentication                             |
| proxy               | An OBJECT containing at least a `host` field but optionally `port` or `username` and `password` fields  | Set these options to connect through a proxy                                      |
| timeout             | An ATOMIC that represents the timeout in milliseconds                                                   | Set this option to limit the time a request can take                              |
| headers             | An OBJECT containing the headers                                                                        | Set this option to add custom headers to your request                             |
| insecure            | An ATOMIC *default: false*                                                                              | Set this option to true if you want to skip hostname validation                   |
| enableRedirect      | An ATOMIC *default: true*                                                                               | Set this option to false if you do not want to automatically follow redirects     |
| multipart           | An ATOMIC *default: false*                                                                              | Set this option to true if you want to build a multipart/form-data request        |
| responseContentType | An ATOMIC describing a content type                                                                     | Set this option to override the response type auto detector                       |
| logging             | An ATOMIC (debug, info, warn or error) *default: null*                                                  | Set this option to enable logging of requests and responses                       |
        </parameterDescription>
	</parameterDescriptions>
	<longDescription>
## Request
### Multipart
To make multipart requests you simply set the multipart option to `true` and conform to the multipart body syntax:

    {
        "[PART NAME]": {
            "type": "file|stream|text",
            "contentType": "RFC 822 Content Type",
            "content": "SEE BELOW"
        }
    }

or a LIST in the following format:

    [
        {
            "name":"[PART NAME]",
            "type":"file|stream|text",
            "contentType":"RFC 822 Content Type"
            "content":"SEE BELOW",
        }
    ]

The two bodies above are equivalent. A body can contain multiple parts.

A part must contain a `[PART NAME]` (as shown above). This could either be as a key when using the OBJECT syntax for the multipart body, or this could be with a `name` option when using the LIST syntax for the multipart body.
Passing the body as a LIST allows for multiple parts with the same name.

A part must contain at least the `content` and `type` options. The `contentType` option is optional.
See the table below for an explanation of the options which a body part should consist of.

| Option Name            | Value                                                                                                                                                                                            | Description                                                                    |
| ---------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------ |
| name                   | An ATOMIC containing the part name                                                                                                                                                               | The part name in case of using LISTS                                           |
| content                | An ATOMIC containing a file path or a stream, depending on the type option                                                                                                                       | The content of the body part                                                   |
| type                   | Can be `"text"`, `"file"` or `"stream"`, see below for more information                                                                                                                          | Determines the type of the content option                                      |
| contentType (optional) | An ATOMIC containing a [RFC 822](https://www.w3.org/Protocols/rfc1341/4_Content-Type.html) content type, or the default (described in the table below) if this option is not given               | The content-type field in the form part, this option will not be validated     |

The field `type` instructs the request how to interpret the provided content.

| Type field | Content field                                                                                                          | Default content type        |
| ---------- | ---------------------------------------------------------------------------------------------------------------------- | --------------------------- |
| file       | A file path. A file patch will be made with the target file as a payload.                                              | application/octet-stream    |
| stream     | A (binary) stream will be expected and consumed. Note that retries are not possible when providing streams as content. | application/octet-stream    |
| text       | Plain text will be sent as the body. If you provide a stream it will be read as text.                                  | text/plain                  |

## Response
If the request is performed without errors the return value will be an object that describes the response.

### Status
The `status` field contains an object that has a `code` field that contains the HTTP Status Code and a `phrase` field that contains the description.

    {
        "status": {
            "code": 200,
            "phrase": "OK"
        },
        ...
    }
    
### Headers
The `headers` field contains an object that has the header names as keys and header values as values.

    {
        "headers" : {
            "Content-Type" : "application/json; charset=UTF-8",
            "access-control-allow-origin" : "*",
            "Vary" : "Accept-Encoding",
            "Date" : "Thu, 18 Feb 2016 09:10:46 GMT",
            "Server" : "Google Frontend",
            "Cache-Control" : "private",
            "Alt-Svc" : "quic=\":443\"; ma=2592000; v=\"30,29,28,27,26,25\"",
            "Transfer-Encoding" : "chunked"
        },
        ...
    }

### Version
The `version` field contains a string describing the current HTTP protocol version.

    {
        "version": "HTTP/1.1",
        ...
    }

### Body
The `body` field contains the response body. The type of content in here is auto detected form the Content-Type header which can be overridden using the `responseContentType` option.

| Content-Type    | Result                                         |
| --------------- | ---------------------------------------------- |
| Contains "json" | The JSON parsed to an expression               |
| Contains "xml"  | An XML node that can be used by the XML plugin |
| Contains "text" | A plain text string                            |
| Otherwise       | A stream containing the data                   |

    // JSON
    {
        "body": {
            "data": ["It's, "a", "good", "day"]
        },
        ...
    }
    // XML
    {
        "body": "XML Document[first node = Data]",
        ...
    }
    // TEXT
    {
        "body": "Hello World",
        ...
    )
    // STREAM
    {
        "body": "[Stream application/octet-stream]",
        ...
    }
	</longDescription>
    <examples>
        <example title="Usage">
            <header>Make a minimal post request</header>
            <code>
                use XURL, System;

                var response = XURL.post(
                    "https://httpbin.org/post",
                    "This is my plain text data"
                );

                var prettyJson = System.toJSON(response, true);
                System.print(prettyJson);
            </code>
            <header>Send a multipart request</header>
            <code>
                use XURL, System, File;

                var filePath = System.info().robotPath;

                var response = XURL.post(
                    "https://httpbin.org/post",
                    {
                        "file": {
                            "content": filePath,
                            "type": "file",
                            "contentType": "text/plain"
                        },
                        "description": {
                            "content": "This is an example of a multipart request",
                            "type": "text"
                        }
                    },
                    {
                        // Make this request a multipart request
                        "multipart": true
                    }
                );

                var prettyJson = System.toJSON(response, true);
                System.print(prettyJson);
            </code>
            <header>Send a request under basic authentication</header>
            <code>
                use XURL, System;

                var response = XURL.post(
                    "https://httpbin.org/post",
                    "This is an example of an authenticated request",
                    {
                        // Set the basicAuth option
                        "basicAuth": {
                            "username": "user",
                            "password": "passwd"
                        }
                    }
                );

                var prettyJson = System.toJSON(response, true);
                System.print(prettyJson);
            </code>
            <header>Send a request with a custom content type header</header>
            <code>
                use XURL, System;

                var response = XURL.post(
                    "https://httpbin.org/post",
                    '{ "data": "My Document" }',
                    {
                        "headers": {
                            "Content-Type": "application/vnd.emc.documentum+json"
                        }
                    }
                );

                var prettyJson = System.toJSON(response, true);
                System.print(prettyJson);
            </code>
            <header>Override the detected response content type</header>
            <code>
                use XURL, System;

                var response = XURL.post(
                    "https://httpbin.org/post",
                    '{ "data": "My Document" }',
                    {
                        "responseContentType": "text"
                    }
                );

                var prettyJson = System.toJSON(response, true);
                System.print(prettyJson);
            </code>
            <header>Enable debug logging for requests</header>
            <code>
                use XURL, System;

                var response = XURL.post(
                    "https://httpbin.org/post",
                    "This is my plain text data",
                    {
                        "logging": "debug"
                    }
                );

                var prettyJson = System.toJSON(response, true);
                System.print(prettyJson);
            </code>
        </example>
    </examples>
    <references>
        <reference>delete</reference>
        <reference>get</reference>
        <reference>head</reference>
        <reference>put</reference>
        <reference>options</reference>
        <reference>patch</reference>
    </references>
    <tags>
        REST, post, request, response, JSON
    </tags>
</function>
