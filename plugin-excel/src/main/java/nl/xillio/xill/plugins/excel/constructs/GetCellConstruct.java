/**
 * Copyright (C) 2014 Xillio (support@xillio.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package nl.xillio.xill.plugins.excel.constructs;

import nl.xillio.xill.api.components.MetaExpression;
import nl.xillio.xill.api.construct.Argument;
import nl.xillio.xill.api.construct.ConstructContext;
import nl.xillio.xill.api.construct.ConstructProcessor;
import nl.xillio.xill.api.errors.RobotRuntimeException;
import nl.xillio.xill.plugins.excel.datastructures.XillCellRef;
import nl.xillio.xill.plugins.excel.datastructures.XillSheet;

/**
 * Construct to get the value of a cell from a XillSheet.
 *
 * @author Daan Knoope
 */
public class GetCellConstruct extends AbstractExcelConstruct {

    /**
     * Returns the value of the provided cell, from the provided sheet.
     *
     * @param sheetInput a sheet as generated by {@link CreateSheetConstruct} or {@link LoadSheetConstruct}
     * @param column     the column of the required cell - either in alphabetical or
     *                   numeric notation (eg AB or 28)
     * @param row        the row of the required cell in numeric notation (eg 28)
     * @return the value of the cell
     */
    static MetaExpression process(MetaExpression sheetInput, MetaExpression column, MetaExpression row) {
        XillSheet sheet = assertMeta(sheetInput, PARAMETER_NAME_SHEET, XillSheet.class, "Excel Sheet");

        int rowNum = assertNumeric(row, PARAMETER_NAME_ROW);

        XillCellRef cell;

        if (isNumeric(column)) {
            cell = createCellRef(column.getNumberValue().intValue(), rowNum);
        } else {
            cell = createCellRef(column.getStringValue(), rowNum);
        }

        return fromCellValue(sheet.getCellValue(cell));
    }

    static XillCellRef createCellRef(String column, int row) {
        try {
            return new XillCellRef(column, row);
        } catch (IllegalArgumentException e) {
            throw new RobotRuntimeException(e.getMessage(), e);
        }
    }

    static XillCellRef createCellRef(int column, int row) {
        try {
            return new XillCellRef(column, row);
        } catch (IllegalArgumentException e) {
            throw new RobotRuntimeException(e.getMessage(), e);
        }
    }

    @Override
    public ConstructProcessor prepareProcess(ConstructContext context) {
        return new ConstructProcessor(
                GetCellConstruct::process,
                new Argument(PARAMETER_NAME_SHEET, OBJECT),
                new Argument(PARAMETER_NAME_COLUMN, ATOMIC),
                new Argument(PARAMETER_NAME_ROW, ATOMIC));
    }
}
