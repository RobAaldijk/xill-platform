<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2014 Xillio (support@xillio.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<function>
  <description>
Store/update an entry in a table from a database.  

The table parameter is the name of the table where the new object will be inserted in.  
The object is the object that needs to be stored.  
The keys argument is optional. The strings listed in the keys argument will be used as primary key.   
the allowUpdate parameter works as follows: If an entry is found with the same primary key(s) as the given object and allowUpdate is TRUE then the existing entry in the database will be updated
with the new object. If allowUpdate is FALSE it will not do anything. It will always create a new entry if no entry is found or no keys have been given.
The database parameter is optional. The last made connection will be used if no database is given.  

storeObject will always return __null__.
  </description>
  <examples>
    <example>
      <header>update the entry with the new values from the given object. using the 'name' column as primary key.
      </header>
      <code>
	//we have a database with the table 'test' with columns: name | age 
	//with the row: "Turing" | 55
	
	var entry = {"name":"Turing","age":90};
	Database.storeObject("test",entry,["name"],true,database);
	
	//the row "Turing" | 55 has now changed to "Turing" | 90
	
      </code>
    </example> 
    <example>
      <header>create new row with the values from the given object. using the 'name' column as primary key.
      </header>
      <code>
	//we have a database with the table 'test' with columns: name | age , This table is empty.
	
	var entry = {"name":"Turing","age":90};
	Database.storeObject("test",entry,["name"],true,database);
	//here it does not matter whether the allowUpdate parameter is true or false since the table is empty
	
	//the table 'test' now has one row containing: "Turing" | 90
	
      </code>
    </example> 
  </examples>
  <references>
    <reference>connect</reference>
    <reference>getObject</reference>
  </references>
  <tags>
    storeObject,object
  </tags>
</function>