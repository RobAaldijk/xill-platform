#
# Copyright (C) 2014 Xillio (support@xillio.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

xws.api.version=1.0
xws.api.base.path=/xws/api/${xws.api.version}

#spring.data.mongodb.host=localhost
#spring.data.mongodb.database=xillserver
#spring.data.mongodb.port=27017
#spring.data.mongodb.uri=mongodb://localhost/xillserver

#server.port = 8080

spring.http.multipart.max-file-size=100MB
spring.http.multipart.max-request-size=100MB

spring.jmx.enabled=false

## The directory where Xill plugins are located
# xillRuntime.pluginDir = /path/to/plugins
## The directory where plugin licenses are located
# xillRuntime.licenseDir = /path/to/licenses
## The maximum time a call to abort a robot will block
xillRuntime.abortTimeoutMillis = 300000

## Maximum xill workers per one xill worker pool
xill.maxExecutors=20
## Working directory for this service: bots are resolved starting from here. When empty the current OS work directory is used
xill.workDirectory=.

## Minimum number of idle Xill runtimes available in the pool
runtimePool.minIdle = 1
## Absolute maximum number of idle Xill runtimes available in the pool, other idle runtimes will be closed
runtimePool.maxIdle = 4
## Minimum time a Xill runtime is idle before it can be closed
runtimePool.minEvictableIdleTimeMillis = 30000
## Time to wait before closing idle Xill runtimes, taking into account minEvictableIdleTimeMillis
runtimePool.timeBetweenEvictionRunsMillis = 600000

## Number of robot compile threads which are always active
compilePool.corePoolSize = 1
## Number of seconds to keep non-core robot compile threads (managed by the application) active
compilePool.keepAliveSeconds = 60
